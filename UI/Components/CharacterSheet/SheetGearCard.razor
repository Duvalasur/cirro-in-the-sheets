@using Models.Characters
@using UI.Conveniences
@using UI.Services
@inject SheetJank SheetJank
@implements IDisposable

<SheetCard @bind-IsFixMode="IsFixMode" Header="Gear">
	<MudStack>
		<MudGrid>
			<MudItem xs="12" md="8">
				<MudRadioGroup @bind-SelectedOption="Gear.Commitment.Commitment">
					<MudRadio Option="LoadCommitmentOption.None" Disabled="!RadioCommitmentsEnabled">@LoadCommitmentOption.None</MudRadio>
					<MudRadio Option="LoadCommitmentOption.Light" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Light) @LoadCommitmentOption.Light</MudRadio>
					<MudRadio Option="LoadCommitmentOption.Normal" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Normal) @LoadCommitmentOption.Normal</MudRadio>
					<MudRadio Option="LoadCommitmentOption.Heavy" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Heavy) @LoadCommitmentOption.Heavy</MudRadio>
					<MudRadio Option="LoadCommitmentOption.Encumbered" Disabled="!RadioCommitmentsEnabled">@((int)LoadCommitmentOption.Encumbered) @LoadCommitmentOption.Encumbered</MudRadio>
				</MudRadioGroup>
			</MudItem>
			<MudItem xs="12" sm="4">
				@if (CommitmentLocked)
				{
					<MudButton FullWidth="true" Variant="Variant.Outlined" OnClick="() => { ClearCommitments(); CommitmentLocked = false; }">Reset</MudButton>
				}
				else
				{
					<MudButton FullWidth="true" Variant="Variant.Outlined" OnClick="() => CommitmentLocked = true">Commit</MudButton>
				}
			</MudItem>
		</MudGrid>
		<MudText Typo="Typo.h6">Loadout</MudText>
		<MudContainer>
			<MudText>Coin (@Character.Fund.Satchel.Coins)</MudText>
			@foreach (var item in Gear.Loadout)
			{
				@commitmentItemRenderer!(item)
			}
		</MudContainer>
		<MudStack Row="true" Justify="Justify.SpaceBetween">
			<MudText Typo="Typo.h6">Available Gear</MudText>
			<MudText Typo="Typo.h6">Bulk Remaining: @Character.AvailableBulk</MudText>
		</MudStack>
		<MudContainer>
			@foreach (var item in Gear.UncommittedGear)
			{
				<MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.AddCircle" Disabled="!Character.CanCommitGear(item) || !CommitmentLocked" OnClick="() => CommitGear(item)">@item.Display()</MudButton>
			}
		</MudContainer>
	</MudStack>
</SheetCard>

@code
{
	[Parameter, EditorRequired]
	public Character Character { get; set; } = Character.Empty();

	[Parameter, EditorRequired]
	public PlaybookOption Playbook { get; set; }

	public Gear Gear => Character.Gear;

	bool CommitmentLocked { get; set; } = false;

	bool RadioCommitmentsEnabled => IsFixMode || !CommitmentLocked;

	public void CommitGear(GearItem item)
	{
		var isSuccessful = Character.CommitGear(item);

		if (isSuccessful)
			SheetJank.NotifyGearChanged();
	}

	public void ClearCommitments()
	{
		var isSuccessful = Character.ClearCommitments();

		if (isSuccessful)
			SheetJank.NotifyGearChanged();
	}

	public void UncommitGear(GearItem item)
	{
		var isSuccessful = Character.UncommitGear(item);

		if (isSuccessful)
			SheetJank.NotifyGearChanged();
	}

	// Dynamic Rendering Demo. Unrecommended use case.

	private bool isFixMode = false;

	bool IsFixMode
	{
		get => isFixMode;
		set
		{
			commitmentItemRenderer = value ? (i) => RenderCommitmentButtons(i)
	: (i) => RenderCommitmentText(i);
			isFixMode = value;
		}
	}

	protected override void OnInitialized()
	{
		commitmentItemRenderer = (i) => RenderCommitmentText(i);

		Character.Fund.Satchel.SatchelChanged += StateHasChanged;

		base.OnInitialized();
	}

	public void Dispose()
	{
		Character.Fund.Satchel.SatchelChanged -= StateHasChanged;
	}

	private Func<GearItem, RenderFragment>? commitmentItemRenderer;

	private RenderFragment RenderCommitmentText(GearItem item) => @<MudText>@item.Name (@item.Bulk)</MudText>;

	private RenderFragment RenderCommitmentButtons(GearItem item) => @<MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick="() => UncommitGear(item)">@item.Name (@item.Bulk)</MudButton>;
}
