@using Domain.Characters
@using Persistence.Json
@inject ILoader Loader

<MudCard Outlined="true">
	<MudCardHeader>
		<MudText>Choose a special ability</MudText>
	</MudCardHeader>
	<MudCardContent>
		<MudText>If you're unsure which one to pick, the first is considered a good default choice.</MudText>
		<MudSelect T="PlaybookSpecialAbility" Value="ChosenAbility" ValueChanged="OnChosenAbilityChanged" Label="Special Ability" >
			@foreach (var ability in AvailableAbilities)
			{
				<MudSelectItem T="PlaybookSpecialAbility" Value="ability">
					<MudText>@DisplayText(ability)</MudText>
					<MudText>@ability.Description</MudText>
				</MudSelectItem>
			}
		</MudSelect>
		@foreach(var ability in Playbook.Abilities)
		{
			<MudText>@ability.Description</MudText>
		}
	</MudCardContent>
</MudCard>

@code
{
	[Parameter, EditorRequired]
	public Playbook? Playbook { get; set; }

	public PlaybookSpecialAbility[] AvailableAbilities { get; private set; } = new PlaybookSpecialAbility[0];

	private PlaybookSpecialAbility? ChosenAbility { get; set; }

	private void OnChosenAbilityChanged(PlaybookSpecialAbility value)
	{
		if (Playbook == null)
			return;

		Playbook.ClearAbilities();
		ChosenAbility = value;
		Playbook.TakeAbility(ChosenAbility);
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		_ = Playbook ?? throw new ArgumentNullException(nameof(Playbook));

		if (Playbook.Option == PlaybookOption.Unknown)
			return;

		AvailableAbilities = await Loader.LoadAvailableAbilitiesAsync(Playbook.Option.ToString());
	}

	public static string DisplayText(PlaybookSpecialAbility ability) =>
		ability.TimesTakable == 1 ? ability.Name
		: $"{ability.Name} (take once of {ability.TimesTakable} possible times)";
}
