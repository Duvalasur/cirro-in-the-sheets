@using Domain.Characters

<MudCard Outlined="true" Class="mx-4 my-1 mud-theme-primary">
	<MudCardHeader>
		<MudTextField @bind-Value="Dossier.Name" HelperText="Name" />
		<MudTextField @bind-Value="Dossier.Alias" HelperText="Alias" />
	</MudCardHeader>
	<MudCardContent>
		<MudSelect @bind-Value="Dossier.Background.Background" HelperText="Background" Required="true">
			@foreach (var option in Backgrounds)
			{
				<MudSelectItem Value="@option">
					
				</MudSelectItem>
			}
		</MudSelect>
		<MudTextField @bind-Value="Dossier.Background.Description" />
		<MudSelect @bind-Value="Dossier.Heritage.Heritage" HelperText="Heritage" Required="true">
			@foreach (var option in Heritages)
			{
				<MudSelectItem Value="@option" />
			}
		</MudSelect>
		<MudTextField @bind-Value="Dossier.Heritage.Description" />
		<MudSelect @bind-Value="Dossier.Vice.Vice" HelperText="Vice" Required="true">
			@foreach (var option in Vices)
			{
				<MudSelectItem Value="@option" />
			}
		</MudSelect>
		<MudTextField @bind-Value="Dossier.Vice.Description" />
		<MudTextField @bind-Value="Dossier.Look" Label="Look" Lines="3" />
	</MudCardContent>
</MudCard>

@code
{
	[Parameter]
	public Dossier Dossier { get; set; } = new();

	private static IReadOnlyCollection<BackgroundOption> Backgrounds { get; } =
		Enum.GetNames<BackgroundOption>()
			.Select(n => Enum.Parse<BackgroundOption>(n))
			.Where(o => o != BackgroundOption.Unknown)
			.ToArray();

	private static IReadOnlyCollection<HeritageOption> Heritages { get; } =
		Enum.GetNames<HeritageOption>()
			.Select(n => Enum.Parse<HeritageOption>(n))
			.Where(o => o != HeritageOption.Unknown)
			.ToArray();

	private static IReadOnlyCollection<ViceOption> Vices { get; } =
		Enum.GetNames<ViceOption>()
			.Select(n => Enum.Parse<ViceOption>(n))
			.Where(o => o != ViceOption.Unknown)
			.ToArray();
}
