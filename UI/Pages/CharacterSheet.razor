@page "/sheets/{Id}"
@using Models.Characters
@using UI.Components
@using UI.Components.CharacterSheet
@using UI.Services
@inject IStorageService Storage

@if (Character == null) { return; }

<MudContainer MaxWidth="MaxWidth.False">
	<MudGrid>
		<MudItem xs="12" lg="6">
			<MudStack>
				<SheetDossierCard Dossier="Character.Dossier" />
				<SheetMonitorCard Character="Character" />
				<SheetTalentCard Talent="Character.Talent" />
				<SheetAbilitiesCard Character="Character" />
			</MudStack>
		</MudItem>
		<MudItem xs="12" lg="6">
			<MudStack>
				<SheetRolodexCard Rolodex="Character.Rolodex" Playbook="Character.Playbook.Option" />
				<SheetGearCard Character="Character" Playbook="Character.Playbook.Option" />
				<SheetFundCard Fund="Character.Fund" />
				<SheetNotebookCard Character="Character" />
			</MudStack>
		</MudItem>
	</MudGrid>
	<MudFab Color="SaveButtonColor" StartIcon="@Icons.Material.Filled.Save" OnClick="Save" Style="position: fixed; right: 20px; bottom: 20px;" Title="Save Character" />
</MudContainer>

@code
{
	[Parameter, EditorRequired]
	public string Id { get; set; } = string.Empty;

	public Character? Character { get; set; }

	private bool isSaving = false;

	Color SaveButtonColor => isSaving ? Color.Tertiary
		: Color.Primary;

	protected override async Task OnInitializedAsync()
	{
		Character = await Storage.Load(Id);
	}

	async Task Save()
	{
		isSaving = true;
		await Storage.Save(Character!);
		isSaving = false;
	}
}
