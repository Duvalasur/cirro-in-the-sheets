@page "/sheets/{Id}"
@using Models.Characters
@using UI.Components
@using UI.Components.CharacterSheet
@using UI.Services
@inject IStorageService Storage

<MudContainer>
	@if (Character != null)
	{
		<MudGrid>
			<MudItem xs="12" lg="6">
				<SheetDossierCard Dossier="Character!.Dossier" />
			</MudItem>
			<MudItem xs="12" lg="6">
				<SheetMonitorCard Character="Character" />
			</MudItem>
			<MudItem xs="12" lg="6">
				<SheetTalentCard Talent="Character!.Talent" />
			</MudItem>
			<MudItem xs="12" lg="6">
				<SheetAbilitiesCard Playbook="Character!.Playbook" />
			</MudItem>
			<MudItem xs="12" lg="6">
				<SheetRolodexCard Rolodex="Character!.Rolodex" Playbook="Character!.Playbook.Option" />
			</MudItem>
			<MudItem xs="12" lg="6">
				<SheetGearCard Character="Character" Playbook="Character!.Playbook.Option" />
			</MudItem>
			<MudItem xs="12" lg="6">
				<SheetFundCard Fund="Character!.Fund" />
			</MudItem>
		</MudGrid>
		<MudFab Color="SaveButtonColor" StartIcon="@Icons.Material.Filled.Save" OnClick="Save" Style="position: fixed; right: 20px; bottom: 20px;" Title="Save Character" />
	}
</MudContainer>

@code
{
	[Parameter, EditorRequired]
	public string Id { get; set; } = string.Empty;

	public Character? Character { get; set; }

	private bool isSaving = false;

	Color SaveButtonColor => isSaving ? Color.Tertiary
		: Color.Primary;

	protected override async Task OnInitializedAsync()
	{
		Character = await Storage.Load(Id);
	}

	async Task Save()
	{
		isSaving = true;
		await Storage.Save(Character!);
		isSaving = false;
	}
}
